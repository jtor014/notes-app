services:
  db:
    image: postgres:15-alpine
    container_name: notes-db
    environment:
      POSTGRES_USER: ${DB_USER:-notesuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-notespass}
      POSTGRES_DB: ${DB_NAME:-notesdb}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5434:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-notesuser}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: notes-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  backend:
    build: ./backend
    container_name: notes-backend
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-notesdb}
      DB_USER: ${DB_USER:-notesuser}
      DB_PASSWORD: ${DB_PASSWORD:-notespass}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      CACHE_TTL: ${CACHE_TTL:-60}
      NODE_ENV: ${NODE_ENV:-development}
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  frontend:
    build: ./frontend
    container_name: notes-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

volumes:
  postgres_data:
    name: notes_postgres_data
  redis_data:
    name: notes_redis_data

networks:
  app-network:
    driver: bridge
    name: notes_network